LongNum

A LongNum is a quartet (digits, comma, base, sign)

the std::string digits represents the digits of the number in reverse order:
the first element is the least significant digit, 
while the last element is the most significant digit.

comma is the index of the ones in digits.
For example, 123.45678 is represented by the string 87654321 and comma=5.
This is equivalent to then number represented by 0087654321 and comma=7.

base is the base in which the numbers are represented. By default this is 10
with digits ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'].
If the base is 11 or higher, the lowercase letters will be used insequence for higher value.
For example, if iBase is 16. then we can use the digits
['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'. 'a', 'b', 'c', 'd', 'e', 'f'].

The sign is stored separately because our basic operations are 
only implemented for natural numbers.


Digit operation tables
  maps of maps indexed by the digit symbols (chars)
  binary operations
    addition
    subtraction
    multiplication 
    division
  functions
    sqrt

The algorithms
==============
    addition (for numbers >= 0)
    ---------------------------
      prefix and/or postfx zeroes so both strings have the same length
        and the same number of digits after the comma
      
      set carry = 0
      loop curindex from 0 to length - 1
        d1 = digit of s1 at curindex
        d2 = digit of s2 at curindex
      
        use addition table to get s1 = d1 + carry (with carryA)
        use addition table to get s  = s1 + d2    (with carryB)
        carry = carryQ + carryB
        (carryA, carry B <= 1; only one of them is > 0)
        write s at position curindex of result string
      end loop
      if carry > 0 then write a "1" at position length

    subtraction (for number >= 0)
    -----------------------------
      prefix and/or postfx zeroes so both strings have the same length
        and the same number of digits after the comma

      if necessary, swap s1 and s2 such that s1 > 2

      set carry = 0
      loop curindex from 0 to length - 1
        d1 = digit of s1 at curindex
        d2 = digit of s2 at curindex

        use addition table to get c2 = c2 + carry (with carryA)
        use subtraction table to get s1 = d1 - c2 (with carryB)
        use addition table to get carry = carryA + carryB (with carryX???)
        (carryA, carry B <= 1; only one of them is > 0)
        write s at position curindex of result string
       end loop
     
    multiplication with single digit
    --------------------------------
    An auxiliary function for  multiplication of numbers >= 0
      set carry = 0
      loop curindex from 0 to length - 1
        d1 = digit of s1 at curindex
        
        use multiplication table to get c1 = d1 * x (with carryA)
        use addition table to get       c2 = carry + c1 )with carryB)
        write s at position curindex of result string      
        use addition table to get      carry = carryA + carryB
      end loop
      if carry > 0 then write 
        write carry at position length of result string

    multiplication (for numbers >= 0)
    ---------------------------------
      loop curindex from 0 to length - 1
        d1 = digit of s1 at curindex
    


    division
    --------

    square root
    -----------

    